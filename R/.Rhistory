source("my_gamsel.R")
source("control_gendata.R")
source("myplot_gamsel.R")
source("myplot_gam.R")
# plot_true <-
#   function(data, p, deg, ylims){
#     y = matrix(NA, nrow = nrow(data$XX), ncol = p)
#     for (j in 1:p){
#       y[,j] = data$U[,((j-1)*deg+1):(j*deg)] %*% data$beta[((j-1)*deg+1):(j*deg)] + data$X[,j] * data$alpha[j]
#     }
#     if(missing(ylims))ylims=range(y)
#     for (j in 1:p){
#       o = order(data$X[,j])
#       plot(data$X[o,j],y[o,j], type = 'l', ylab=paste("true_f(v",j,")",sep=""),xlab=paste("v",j,sep=""),lwd=2, ylim = ylims)
#     }
#     return(list(ylims = ylims, y=y))
#   }
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  500
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=5)
install.packages("tictoc")
install.packages("gamsel")
install.packages("dplyr")
install.packages("gam")
install.packages("ggplot2")
getwd()
library(tictoc)
library(gamsel)
library(dplyr)
library(gam)
library(ggplot2)
dyn.load("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/src/gamsel.dll")
setwd("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/R")
source("fracdev.R")
source("my_gamsel.R")
source("control_gendata.R")
source("myplot_gamsel.R")
source("myplot_gam.R")
# plot_true <-
#   function(data, p, deg, ylims){
#     y = matrix(NA, nrow = nrow(data$XX), ncol = p)
#     for (j in 1:p){
#       y[,j] = data$U[,((j-1)*deg+1):(j*deg)] %*% data$beta[((j-1)*deg+1):(j*deg)] + data$X[,j] * data$alpha[j]
#     }
#     if(missing(ylims))ylims=range(y)
#     for (j in 1:p){
#       o = order(data$X[,j])
#       plot(data$X[o,j],y[o,j], type = 'l', ylab=paste("true_f(v",j,")",sep=""),xlab=paste("v",j,sep=""),lwd=2, ylim = ylims)
#     }
#     return(list(ylims = ylims, y=y))
#   }
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  500
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=5)
library(tictoc)
library(gamsel)
library(dplyr)
library(gam)
library(ggplot2)
dyn.load("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/src/gamsel.dll")
setwd("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/R")
source("fracdev.R")
source("my_gamsel.R")
source("control_gendata.R")
source("myplot_gamsel.R")
source("myplot_gam.R")
# plot_true <-
#   function(data, p, deg, ylims){
#     y = matrix(NA, nrow = nrow(data$XX), ncol = p)
#     for (j in 1:p){
#       y[,j] = data$U[,((j-1)*deg+1):(j*deg)] %*% data$beta[((j-1)*deg+1):(j*deg)] + data$X[,j] * data$alpha[j]
#     }
#     if(missing(ylims))ylims=range(y)
#     for (j in 1:p){
#       o = order(data$X[,j])
#       plot(data$X[o,j],y[o,j], type = 'l', ylab=paste("true_f(v",j,")",sep=""),xlab=paste("v",j,sep=""),lwd=2, ylim = ylims)
#     }
#     return(list(ylims = ylims, y=y))
#   }
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  500
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=5)
View(bases)
data$yp
dyn.load("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/src/gamsel.so")
library(tictoc)
library(gamsel)
library(dplyr)
library(gam)
library(ggplot2)
dyn.load("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/src/gamsel.so")
setwd("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/R")
source("fracdev.R")
source("my_gamsel.R")
source("control_gendata.R")
source("myplot_gamsel.R")
source("myplot_gam.R")
# plot_true <-
#   function(data, p, deg, ylims){
#     y = matrix(NA, nrow = nrow(data$XX), ncol = p)
#     for (j in 1:p){
#       y[,j] = data$U[,((j-1)*deg+1):(j*deg)] %*% data$beta[((j-1)*deg+1):(j*deg)] + data$X[,j] * data$alpha[j]
#     }
#     if(missing(ylims))ylims=range(y)
#     for (j in 1:p){
#       o = order(data$X[,j])
#       plot(data$X[o,j],y[o,j], type = 'l', ylab=paste("true_f(v",j,")",sep=""),xlab=paste("v",j,sep=""),lwd=2, ylim = ylims)
#     }
#     return(list(ylims = ylims, y=y))
#   }
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  500
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=5)
## MY GAMSEL model fitting
tic("MY GAMSEL model fitting")
my_gamsel.binout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.1, bases = bases, family = "binomial", gamma = gamma0)
toc()
family =="poisson"
family ='poisson'
switch(family, "poisson"==3, "other"==2)
switch(family, "poisson"=3, "other"=2)
family_id <- as.integer(switch(family,
"gaussian"=1,
"binomial"=2,
"poisson"=3))
library(tictoc)
library(gamsel)
library(dplyr)
library(gam)
library(ggplot2)
dyn.load("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/src/gamsel.so")
setwd("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/R")
source("fracdev.R")
source("my_gamsel.R")
source("control_gendata.R")
source("myplot_gamsel.R")
source("myplot_gam.R")
# plot_true <-
#   function(data, p, deg, ylims){
#     y = matrix(NA, nrow = nrow(data$XX), ncol = p)
#     for (j in 1:p){
#       y[,j] = data$U[,((j-1)*deg+1):(j*deg)] %*% data$beta[((j-1)*deg+1):(j*deg)] + data$X[,j] * data$alpha[j]
#     }
#     if(missing(ylims))ylims=range(y)
#     for (j in 1:p){
#       o = order(data$X[,j])
#       plot(data$X[o,j],y[o,j], type = 'l', ylab=paste("true_f(v",j,")",sep=""),xlab=paste("v",j,sep=""),lwd=2, ylim = ylims)
#     }
#     return(list(ylims = ylims, y=y))
#   }
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  500
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=5)
## MY GAMSEL model fitting
tic("MY GAMSEL model fitting")
my_gamsel.binout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.1, bases = bases, family = "binomial", gamma = gamma0)
toc()
source("my_gamsel.R")
library(tictoc)
library(gamsel)
library(dplyr)
library(gam)
library(ggplot2)
dyn.load("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/src/gamsel.so")
setwd("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/R")
source("fracdev.R")
source("my_gamsel.R")
source("control_gendata.R")
source("myplot_gamsel.R")
source("myplot_gam.R")
# plot_true <-
#   function(data, p, deg, ylims){
#     y = matrix(NA, nrow = nrow(data$XX), ncol = p)
#     for (j in 1:p){
#       y[,j] = data$U[,((j-1)*deg+1):(j*deg)] %*% data$beta[((j-1)*deg+1):(j*deg)] + data$X[,j] * data$alpha[j]
#     }
#     if(missing(ylims))ylims=range(y)
#     for (j in 1:p){
#       o = order(data$X[,j])
#       plot(data$X[o,j],y[o,j], type = 'l', ylab=paste("true_f(v",j,")",sep=""),xlab=paste("v",j,sep=""),lwd=2, ylim = ylims)
#     }
#     return(list(ylims = ylims, y=y))
#   }
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  500
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=5)
## MY GAMSEL model fitting
tic("MY GAMSEL model fitting")
my_gamsel.binout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.1, bases = bases, family = "binomial", gamma = gamma0)
toc()
my_gamsel.poout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.1, bases = bases, family = "binomial", gamma = gamma0)
View(my_gamsel.poout)
View(data)
library(tictoc)
library(gamsel)
library(dplyr)
library(gam)
library(ggplot2)
dyn.load("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/src/gamsel.so")
setwd("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/R")
source("fracdev.R")
source("my_gamsel.R")
source("control_gendata.R")
source("myplot_gamsel.R")
source("myplot_gam.R")
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  4000
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=8)
View(data)
## MY GAMSEL model fitting
tic("MY GAMSEL model fitting")
my_gamsel.poout = my_gamsel(data$X, data$yp, num_lambda = 1,lambda = 0.1, bases = bases, family = "poisson", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.poout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "counts")
my_plot.gamsel(data=data, deg = degree,
my_gamsel.poout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "counts")
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
View(my_gamsel.poout)
View(data)
data[["yp"]]
library(tictoc)
library(gamsel)
library(dplyr)
library(gam)
library(ggplot2)
dyn.load("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/src/gamsel.so")
setwd("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/R")
source("fracdev.R")
source("my_gamsel.R")
source("control_gendata.R")
source("myplot_gamsel.R")
source("myplot_gam.R")
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  500
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=8)
## MY GAMSEL model fitting
tic("MY GAMSEL model fitting")
my_gamsel.poout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.1, bases = bases, family = "poisson", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.poout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "counts")
## MY GAMSEL model fitting
tic("MY GAMSEL model fitting")
my_gamsel.poout = my_gamsel(data$X, data$yp, num_lambda = 1,lambda = 0.1, bases = bases, family = "poisson", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.poout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "counts")
View(my_gamsel.poout)
View(data)
library(tictoc)
library(gamsel)
library(dplyr)
library(gam)
library(ggplot2)
dyn.load("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/src/gamsel.so")
setwd("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/R")
source("fracdev.R")
source("my_gamsel.R")
source("control_gendata.R")
source("myplot_gamsel.R")
source("myplot_gam.R")
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  500
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=8)
## MY GAMSEL model fitting
tic("MY GAMSEL model fitting")
my_gamsel.poout = my_gamsel(data$X, data$yp, num_lambda = 1,lambda = 0.1, bases = bases, family = "poisson", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.poout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "counts")
View(data)
View(my_gamsel.poout)
library(tictoc)
library(gamsel)
library(dplyr)
library(gam)
library(ggplot2)
dyn.load("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/src/gamsel.so")
setwd("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/R")
source("fracdev.R")
source("my_gamsel.R")
source("control_gendata.R")
source("myplot_gamsel.R")
source("myplot_gam.R")
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  500
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=8)
## MY GAMSEL model fitting
tic("MY GAMSEL model fitting")
my_gamsel.poout = my_gamsel(data$X, data$yp, num_lambda = 1,lambda = 0.1, bases = bases, family = "poisson", gamma = gamma0)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
clear
cl
cr
clear
clear()
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
log(320)
View(data)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
View(data)
View(data)
View(my_gamsel.poout)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
View(my_gamsel.poout)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.poout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "counts")
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.poout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "counts")
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.poout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "counts")
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.poout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "counts")
View(my_gamsel.poout)
View(my_gamsel.poout)
my_gamsel.poout[["betas"]]
View(my_gamsel.poout)
View(data)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
View(my_gamsel.poout)
View(my_gamsel.poout)
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.poout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "counts")
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
## Using GAM
tbl_data = as_tibble(data.frame(cbind(data$X,data$yp)))
gam_scope = gam.scope(tbl_data, response = 26, arg = "df=5", form = F)
var_c = c()
for (i in 1:25) {
var_c = c(var_c, gam_scope[[i]][3])
}
tic("model fitting")
full_fit = gam(as.formula(paste("X26~", paste(var_c, collapse = "+"))), family="poisson", tbl_data)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gam(data, full_fit, deg = degree, gam_scope, which = 1:15, factor = 0.1)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)
library(tictoc)
library(gamsel)
library(dplyr)
library(gam)
library(ggplot2)
dyn.load("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/src/gamsel.so")
setwd("/Users/poetofquality/Documents/OneDrive/phd/RA/codesandslides/code/R")
source("fracdev.R")
source("my_gamsel.R")
source("control_gendata.R")
source("myplot_gamsel.R")
source("myplot_gam.R")
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  500
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=5)
View(bases)
View(data)
source('~/Documents/OneDrive/phd/RA/codesandslides/code/R/gamsel_poisson.R', echo=TRUE)

X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2")
require(ggplot2)
pois_sim = function(d, n){
G = rexp(n)
V = cumsum(G)
X_norm = (V*gamma(d/2+1)/pi^(d/2))^(1/d)
X = matrix(rnorm(n*d),nrow = n,ncol = d)
X = X/apply(X,1,function(x){sqrt(sum(x^2))})
sim_points = as.data.frame(sqrt(X_norm)*X)
}
X = pois_sim(2,10)
X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2")
require(ggplot2)
pois_sim = function(d, n){
G = rexp(n)
V = cumsum(G)
X_norm = (V*gamma(d/2+1)/pi^(d/2))^(1/d)
X = matrix(rnorm(n*d),nrow = n,ncol = d)
X = X/apply(X,1,function(x){sqrt(sum(x^2))})
sim_points = as.data.frame(sqrt(X_norm)*X)
}
X = pois_sim(2,10)
X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2")
require(ggplot2)
pois_sim = function(d, n){
G = rexp(n)
V = cumsum(G)
X_norm = (V*gamma(d/2+1)/pi^(d/2))^(1/d)
X = matrix(rnorm(n*d),nrow = n,ncol = d)
X = X/apply(X,1,function(x){sqrt(sum(x^2))})
sim_points = as.data.frame(sqrt(X_norm)*X)
}
X = pois_sim(2,10)
X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2")
require(ggplot2)
pois_sim = function(d, n){
G = rexp(n)
V = cumsum(G)
X_norm = (V*gamma(d/2+1)/pi^(d/2))^(1/d)
X = matrix(rnorm(n*d),nrow = n,ncol = d)
X = X/apply(X,1,function(x){sqrt(sum(x^2))})
sim_points = as.data.frame(sqrt(X_norm)*X)
}
X = pois_sim(2,10)
X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2")
require(ggplot2)
pois_sim = function(d, n){
G = rexp(n)
V = cumsum(G)
X_norm = (V*gamma(d/2+1)/pi^(d/2))^(1/d)
X = matrix(rnorm(n*d),nrow = n,ncol = d)
X = X/apply(X,1,function(x){sqrt(sum(x^2))})
sim_points = as.data.frame(sqrt(X_norm)*X)
}
X = pois_sim(2,10)
X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2")
require(ggplot2)
pois_sim = function(d, n){
G = rexp(n)
V = cumsum(G)
X_norm = (V*gamma(d/2+1)/pi^(d/2))^(1/d)
X = matrix(rnorm(n*d),nrow = n,ncol = d)
X = X/apply(X,1,function(x){sqrt(sum(x^2))})
sim_points = as.data.frame(sqrt(X_norm)*X)
}
set.seed(12)
X = pois_sim(2,10)
X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2")
require(ggplot2)
pois_sim = function(d, n){
G = rexp(n)
V = cumsum(G)
X_norm = (V*gamma(d/2+1)/pi^(d/2))^(1/d)
X = matrix(rnorm(n*d),nrow = n,ncol = d)
X = X/apply(X,1,function(x){sqrt(sum(x^2))})
sim_points = as.data.frame(sqrt(X_norm)*X)
}
set.seed(88)
X = pois_sim(2,10)
X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2")
require(ggplot2)
pois_sim = function(d, n){
G = rexp(n)
V = cumsum(G)
X_norm = (V*gamma(d/2+1)/pi^(d/2))^(1/d)
X = matrix(rnorm(n*d),nrow = n,ncol = d)
X = X/apply(X,1,function(x){sqrt(sum(x^2))})
sim_points = as.data.frame(sqrt(X_norm)*X)
}
set.seed(120)
X = pois_sim(2,10)
X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2")
require(ggplot2)
pois_sim = function(d, n){
G = rexp(n)
V = cumsum(G)
X_norm = (V*gamma(d/2+1)/pi^(d/2))^(1/d)
X = matrix(rnorm(n*d),nrow = n,ncol = d)
X = X/apply(X,1,function(x){sqrt(sum(x^2))})
sim_points = as.data.frame(sqrt(X_norm)*X)
}
set.seed(0)
X = pois_sim(2,10)
X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2")
require(ggplot2)
pois_sim = function(d, n){
G = rexp(n)
V = cumsum(G)
X_norm = (V*gamma(d/2+1)/pi^(d/2))^(1/d)
X = matrix(rnorm(n*d),nrow = n,ncol = d)
X = X/apply(X,1,function(x){sqrt(sum(x^2))})
sim_points = as.data.frame(sqrt(X_norm)*X)
}
set.seed(0)
X = pois_sim(2,30)
X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2")
require(ggplot2)
pois_sim = function(d, n){
G = rexp(n)
V = cumsum(G)
X_norm = (V*gamma(d/2+1)/pi^(d/2))^(1/d)
X = matrix(rnorm(n*d),nrow = n,ncol = d)
X = X/apply(X,1,function(x){sqrt(sum(x^2))})
sim_points = as.data.frame(sqrt(X_norm)*X)
}
set.seed(0)
X = pois_sim(2,30)
X = data.frame(index = rownames(X),X)
ggplot(data = X, aes(x=V1, y=V2, label = index)) +
geom_point() +
geom_text(aes(label = index),hjust=1.5, vjust=1) +
labs(title = "Scatter Plot for d = 2") +
scale_y_continuous(limits=c(-10, 10)) +
scale_x_continuous(name="Speed of cars", limits=c(-10, 10))
updateR()
install.packages("installr")
install.packages("installr")
library(installr)
updateR()
install.packages("gamsel")
## Simulate data
x = runif(10,-1,1)
## Simulate data
x = runif(10,-1,1)
library(gamsel)
basis.gen(x)
poly(1)
poly(c(1,1,1,1,1,1,1),degree=3)
poly(c(1,1,1,1),degree=3)
poly(c(1,1,1,1),degree=5)
poly(c(1,1,1,1),degree=5)
poly(c(1,1,1,1),degree=6)
poly(c(1,1,1,1),degree=2)
poly(c(1,2,3,4),degree=2)
data=gendata(n=500,p=12,k.lin=3,k.nonlin=3,deg=8,sigma=0.5)
attach(data)
bases=pseudo.bases(X,degree=10,df=6)
# Gaussian gam
gamsel.out=gamsel(X,y,bases=bases)
par(mfrow=c(1,2),mar=c(5,4,3,1))
summary(gamsel.out)
View(data)
y
bases$y
bases$y
X
poly(c(1,2,3),degree = 2,raw = T)
poly(c(1,2,3),degree = 3,raw = T)
poly(c(1,2,3),degree = 4,raw = T)
poly(c(1,2,3),degree = 4,raw = F)
poly(c(1,2,3),degree = 4,raw = T)
poly(c(1,2,3),degree = 3,raw = F)
poly(c(1,2,3),degree = 2,raw = F)
temp = poly(c(1,2,3),degree = 2,raw = F)
temp
temp[1]
temp[,1]
temp[,1]*temp[,2]
crossprod(temp[,1]*temp[,2])
temp = poly(c(1,2,3,5,6,7),degree = 2,raw = F)
poly(c(1,2,3,5,6,7),degree = 2,raw = F)
poly(c(1,2,3,5,6,7),degree = 2,raw = T)
data = gendata(n=200, p=30,k.lin=6,k.nonlin=4,deg=5,sigma=0.5)
pseudo.bases(data$X, degree=10, df=5)
bases = pseudo.bases(data$X, degree=10, df=5)
gamsel.out = gamsel(data$X, data$y, bases = bases)
par(mfrow=c(1,2),mar=c(5,4,3,1))
summary(gamsel.out)
par(mfrow=c(1,2),mar=c(5,4,3,1))
summary(gamsel.out)
par(mfrow=c(1,2),mar=c(5,4,3,1))
summary(gamsel.out)
gamsel.cv=cv.gamsel(data$X,data$y,bases=bases)
par(mfrow=c(1,1))
plot(gamsel.cv)
par(mfrow=c(3,4))
plot(gamsel.out,newx=X,index=20)
plot(gamsel.out,newx=X,index=30)
par(mfrow=c(1,1))
plot(gamsel.cv)
par(mfrow=c(3,4))
plot(gamsel.out,newx=data$X,index=30)
library(gamsel)
data = gendata(n=200, p=30,k.lin=6,k.nonlin=4,deg=5,sigma=0.5)
bases = pseudo.bases(data$X, degree=10, df=5)
U=do.call("cbind",bases)
View(U)
View(bases)
library(gamsel)
library(ggplot2)
library(dplyr)
source("control_gendata.R")
source("my_gendata.R")
source("myplot_gamsel.R")
# plot_true <-
#   function(data, p, deg, ylims){
#     y = matrix(NA, nrow = nrow(data$XX), ncol = p)
#     for (j in 1:p){
#       y[,j] = data$U[,((j-1)*deg+1):(j*deg)] %*% data$beta[((j-1)*deg+1):(j*deg)] + data$X[,j] * data$alpha[j]
#     }
#     if(missing(ylims))ylims=range(y)
#     for (j in 1:p){
#       o = order(data$X[,j])
#       plot(data$X[o,j],y[o,j], type = 'l', ylab=paste("true_f(v",j,")",sep=""),xlab=paste("v",j,sep=""),lwd=2, ylim = ylims)
#     }
#     return(list(ylims = ylims, y=y))
#   }
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  2000
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=2000, p=25,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var))
bases = pseudo.bases(data$X, degree=10, df=5)
View(data)
library(gamsel)
library(ggplot2)
library(dplyr)
source("control_gendata.R")
source("my_gendata.R")
source("myplot_gamsel.R")
# plot_true <-
#   function(data, p, deg, ylims){
#     y = matrix(NA, nrow = nrow(data$XX), ncol = p)
#     for (j in 1:p){
#       y[,j] = data$U[,((j-1)*deg+1):(j*deg)] %*% data$beta[((j-1)*deg+1):(j*deg)] + data$X[,j] * data$alpha[j]
#     }
#     if(missing(ylims))ylims=range(y)
#     for (j in 1:p){
#       o = order(data$X[,j])
#       plot(data$X[o,j],y[o,j], type = 'l', ylab=paste("true_f(v",j,")",sep=""),xlab=paste("v",j,sep=""),lwd=2, ylim = ylims)
#     }
#     return(list(ylims = ylims, y=y))
#   }
beta_6 = c(4, -4, 0, 0, 0)
beta_7 = c(8, -24, 16, 0, 0)
beta_8 = c(-3/2, 3, 0, 0, 0)
beta_9 = c(-200/9, 1100/9, -200, 100, 0)
beta_10 = c(3/2, -3, 0, 0, 0)
beta_nonlinear = c(beta_6, beta_7, beta_8, beta_9, beta_10)
gamma0 = 0.4
degree = 5
sample_size =  2000
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=2000, p=25,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var))
bases = pseudo.bases(data$X, degree=10, df=5)
unloadNamespace()
ns
library(Rcpp)
cppFunction('int signC(int x) {
if (x > 0) {
return 1;
} else if (x == 0) {
return 0;
} else {
return -1;
}
}')
signC(6)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
version()
version
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
my_gamsel.binout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.1, bases = bases, family = "binomial", gamma = gamma0)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/my_gamsel.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
tic("GAMSEL model fitting")
gamsel.binout = gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.1, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
sample_size =  5000
tic("GAMSEL model fitting")
gamsel.binout = gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.1, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
memory.limit()
memory.size()
memory.size(max = T)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
my_plot.gamsel(data=data, deg = degree,
my_gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
gamma0 = 0.4
degree = 5
sample_size =  5000
no_var = 25
fixed_beta = c(rep(0, degree*5), beta_nonlinear, rep(0, degree*(no_var-10)))
data = control_gendata(n=sample_size, p=no_var,k.lin=5,k.nonlin=5,deg=degree,sigma=0.5,
fixed_X = matrix(runif(sample_size*no_var), sample_size, no_var), fixed_beta = fixed_beta)
bases = pseudo.bases(data$X, degree=10,df=8)
tic("GAMSEL model fitting")
gamsel.binout = gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.1, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/gamsel_try.R', echo=TRUE)
tic("MY GAMSEL model fitting")
my_gamsel.binout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.5, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
## GAMSEL model fitting
tic("GAMSEL model fitting")
gamsel.binout = gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.5, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
tic("MY GAMSEL model fitting")
my_gamsel.binout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.5, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
## GAMSEL model fitting
tic("GAMSEL model fitting")
gamsel.binout = gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.5, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
tic("MY GAMSEL model fitting")
my_gamsel.binout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.5, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
## GAMSEL model fitting
tic("GAMSEL model fitting")
gamsel.binout = gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.5, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
tic("MY GAMSEL model fitting")
my_gamsel.binout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.5, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
## GAMSEL model fitting
tic("GAMSEL model fitting")
gamsel.binout = gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.5, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
tic("MY GAMSEL model fitting")
my_gamsel.binout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.5, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
## GAMSEL model fitting
tic("GAMSEL model fitting")
gamsel.binout = gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.5, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
tic("MY GAMSEL model fitting")
my_gamsel.binout = my_gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.1, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
my_gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
## GAMSEL model fitting
tic("GAMSEL model fitting")
gamsel.binout = gamsel(data$X, data$yb, num_lambda = 1,lambda = 0.1, bases = bases, family = "binomial", gamma = gamma0)
toc()
par(mfrow=c(3,5), mars(1,1,1,1))
my_plot.gamsel(data=data, deg = degree,
gamsel.binout, newx=data$X,index=1,
which = 1:15, rugplot=F, factor = 0.2, type = "binary")
clusterEvalQ(cl = NULL, expr)
library(snow)
install.packages("snow")
source('D:/OneDrive/phd/RA/codesandslides/code/R/sim4.R', echo=TRUE)
clusterEvalQ(cl, dyn.load("D:/OneDrive/phd/RA/codesandslides/code/src/gamsel.dll"))
source('D:/OneDrive/phd/RA/codesandslides/code/R/sim4.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/sim4.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/sim4.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/sim4.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/sim4.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/sim4.R', echo=TRUE)
install.packages("snow")
source('D:/OneDrive/phd/RA/codesandslides/code/R/sim4.R', echo=TRUE)
source('D:/OneDrive/phd/RA/codesandslides/code/R/sim4.R', echo=TRUE)
